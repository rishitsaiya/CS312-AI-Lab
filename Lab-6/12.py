# -*- coding: utf-8 -*-
"""AI-SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UnOb7IfrfP8PpYHtHgYdOQFaXyhze41V

### **Artifical Lab: Lab-7**
Spam Email Classification using SVM Implementation.
"""

import pandas as pd

url = "https://drive.google.com/file/d/1kj21zPT36RznRclEmJjkekUZzl75hcEg/view?usp=sharing"
path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]

data = pd.read_csv(path,header=None)
data.head()

!ls

data.info()

data.isnull().sum()

data.describe()

from sklearn.model_selection import train_test_split

x = data.drop([57],axis='columns')
y = data.iloc[:,-1]

from sklearn.preprocessing import StandardScaler
x = StandardScaler().fit_transform(x)

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)

C_values = [0.00005, 0.0005, 0.005, 0.05, 0.5, 1, 5, 50, 500, 5000, 50000]
kernals = ['linear', 'poly', 'rbf']

from sklearn.metrics import precision_recall_fscore_support, accuracy_score
def getAcc(x_train, y_train, x_test, y_test, classifier):
    classifier.fit(x_train, y_train)
    y_pred_train = classifier.predict(x_train)
    y_pred_test = classifier.predict(x_test)
    return accuracy_score(y_train, y_pred_train),accuracy_score(y_test, y_pred_test)

import warnings
warnings.filterwarnings('ignore')

AccTable = pd.DataFrame(columns=['C', 'Linear', 'Poly', 'RBF'])

from tqdm.autonotebook import tqdm
from sklearn.svm import SVC

for C_ in tqdm(C_values, leave=False, position=0):
  
  accuracies = []
  
  for ker in tqdm(kernals, leave=False, position=0):
        
    classifier = SVC(C=C_, kernel=ker , max_iter=1e8)
    accuracy = getAcc(x_train, y_train, x_test, y_test, classifier)
    accuracies.append(accuracy)

  AccTable = AccTable.append({'C': C_, 'Linear': accuracies[0], 'Poly': accuracies[1], 'RBF': accuracies[2]}, ignore_index=True)

AccTable